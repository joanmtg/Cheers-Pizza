/**
 * Proyecto Desarrollo de Software II
 * Universidad del Valle
 * EISC
 *
 * Integrantes: 
 *
 * Jhonier Andrés Calero Rodas		1424599
 * Fabio Andrés Castañeda Duarte	1424386
 * Juan Pablo Moreno Muñoz		1423437
 * Joan Manuel Tovar Guzmán		1423124
 *
 * file: VentanaRegistrarModificarPedido.java
 * 
 */
package GUI.GUIPedidos;

import Administracion.Pedido;
import AccesoDatosORM.*;
import Administracion.*;
import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Joan
 */
public class VentanaRegistrarModificarPedido extends javax.swing.JFrame {

    /**
     * Creates new form VentanaRegistrarModificarPedido
     */
    JFrame ventanaAnterior;
    String operacion;
    Pedido pedido;
    AdaptadorClienteControlador adaptadorCliente = new AdaptadorClienteControlador();
    AdaptadorEmpleadoControlador adaptadorEmpleado = new AdaptadorEmpleadoControlador();
    AdaptadorMesaControlador adaptadorMesa = new AdaptadorMesaControlador();
    AdaptadorSucursalControlador adaptadorSucursal = new AdaptadorSucursalControlador();
    AdaptadorItemControlador adaptadorITem = new AdaptadorItemControlador();
    AdaptadorPedidoControlador adaptadorPedido = new AdaptadorPedidoControlador();
    AdaptadorPedidoItemControlador adaptadorItemPedido = new AdaptadorPedidoItemControlador();

    //Para finalizar el registro del pedido
    double total = 0.0;
    boolean clienteVerificado = false;
    boolean meseroVerificado = false;
    boolean pedidoParaLlevar = false;
    String idMesero = "";
    FabricaPedidos fabricaDePedidos = new FabricaPedidos();

    public VentanaRegistrarModificarPedido(JFrame anterior, String operacion, Pedido pedido) {
        super(operacion + " de Pedido");
        initComponents();

        this.ventanaAnterior = anterior;
        this.operacion = operacion;
        this.pedido = pedido;

        setLocationRelativeTo(null);

        bMarcarEntregado.setVisible(false);
        //Se llenan los JcmboBox de Mesa y Sucursal
        llenarCbMesas();
        llenarCbSucursales();

        if (operacion.equals("Modificación")) {

            bMarcarEntregado.setVisible(true);
            //Se pone el total en el JLabel
            total = calcularTotal();
            lbValorTotal.setText("$ " + total);
            llenarDatos(pedido);

        }else if(operacion.equals("Visualizacion")){
            
            bAgregarItem.setEnabled(false);
            bQuitarItem.setEnabled(false);
            bMarcarEntregado.setVisible(false);
            bFinalizar.setEnabled(false);
            bLimpiar.setEnabled(false);
            tablaItemsPedido.setEnabled(false);
            
            lbValorTotal.setText("$ " + pedido.getTotal());
            llenarDatos(pedido);
            
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        panelInferior = new javax.swing.JPanel();
        bAtras = new javax.swing.JButton();
        bFinalizar = new javax.swing.JButton();
        bLimpiar = new javax.swing.JButton();
        lTipoPedido = new javax.swing.JLabel();
        cbTipo = new javax.swing.JComboBox<>();
        lIDCliente = new javax.swing.JLabel();
        lMesa = new javax.swing.JLabel();
        tfIDCliente = new javax.swing.JTextField();
        lSucursal = new javax.swing.JLabel();
        cbSucursales = new javax.swing.JComboBox<>();
        cbMesa = new javax.swing.JComboBox<>();
        lIDMesero = new javax.swing.JLabel();
        tfIDMesero = new javax.swing.JTextField();
        lSucursal1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaItemsPedido = new javax.swing.JTable();
        lbTotal = new javax.swing.JLabel();
        lbValorTotal = new javax.swing.JLabel();
        bAgregarItem = new javax.swing.JButton();
        bQuitarItem = new javax.swing.JButton();
        bMarcarEntregado = new javax.swing.JButton();
        bVerificarIDCliente = new javax.swing.JButton();
        bVerificarIDMesero = new javax.swing.JButton();
        lLogo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panelPrincipal.setBackground(new java.awt.Color(89, 30, 27));

        panelInferior.setBackground(new java.awt.Color(89, 30, 27));
        panelInferior.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Ingrese los datos del Pedido", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Eras Medium ITC", 0, 16), new java.awt.Color(255, 255, 255))); // NOI18N

        bAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bAtras.png"))); // NOI18N
        bAtras.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bAtrasPR.png"))); // NOI18N
        bAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAtrasActionPerformed(evt);
            }
        });

        bFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bFinalizar.png"))); // NOI18N
        bFinalizar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bFinalizarPR.png"))); // NOI18N
        bFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFinalizarActionPerformed(evt);
            }
        });

        bLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bLimpiar.png"))); // NOI18N
        bLimpiar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bLimpiarPR.png"))); // NOI18N
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        lTipoPedido.setFont(new java.awt.Font("Eras Demi ITC", 0, 14)); // NOI18N
        lTipoPedido.setForeground(new java.awt.Color(255, 255, 255));
        lTipoPedido.setText("Tipo:");

        cbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un tipo", "A la Mesa", "Para llevar" }));
        cbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoActionPerformed(evt);
            }
        });

        lIDCliente.setFont(new java.awt.Font("Eras Demi ITC", 0, 14)); // NOI18N
        lIDCliente.setForeground(new java.awt.Color(255, 255, 255));
        lIDCliente.setText("ID Cliente:");

        lMesa.setFont(new java.awt.Font("Eras Demi ITC", 0, 14)); // NOI18N
        lMesa.setForeground(new java.awt.Color(255, 255, 255));
        lMesa.setText("Mesa:");

        lSucursal.setFont(new java.awt.Font("Eras Demi ITC", 0, 14)); // NOI18N
        lSucursal.setForeground(new java.awt.Color(255, 255, 255));
        lSucursal.setText("Sucursal:");

        cbSucursales.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una sucursal" }));

        cbMesa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una mesa" }));

        lIDMesero.setFont(new java.awt.Font("Eras Demi ITC", 0, 14)); // NOI18N
        lIDMesero.setForeground(new java.awt.Color(255, 255, 255));
        lIDMesero.setText("ID Mesero:");

        lSucursal1.setFont(new java.awt.Font("Eras Demi ITC", 0, 14)); // NOI18N
        lSucursal1.setForeground(new java.awt.Color(255, 255, 255));
        lSucursal1.setText("Items:");

        tablaItemsPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Precio Unitario", "Cantidad", "Subtotal", "Entregado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaItemsPedido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablaItemsPedidoKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablaItemsPedido);

        lbTotal.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        lbTotal.setForeground(new java.awt.Color(255, 255, 255));
        lbTotal.setText("Total:");

        lbValorTotal.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        lbValorTotal.setForeground(new java.awt.Color(255, 255, 255));
        lbValorTotal.setText("$ 0");

        bAgregarItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bAgregarItem.png"))); // NOI18N
        bAgregarItem.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bAgregarItemPR.png"))); // NOI18N
        bAgregarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarItemActionPerformed(evt);
            }
        });

        bQuitarItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bQuitarItem.png"))); // NOI18N
        bQuitarItem.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bQuitarItemPR.png"))); // NOI18N
        bQuitarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bQuitarItemActionPerformed(evt);
            }
        });

        bMarcarEntregado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bMarcarEntregado.png"))); // NOI18N
        bMarcarEntregado.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bMarcarEntregadoPR.png"))); // NOI18N
        bMarcarEntregado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMarcarEntregadoActionPerformed(evt);
            }
        });

        bVerificarIDCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bVerificar.png"))); // NOI18N
        bVerificarIDCliente.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bVerificarPR.png"))); // NOI18N
        bVerificarIDCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerificarIDClienteActionPerformed(evt);
            }
        });

        bVerificarIDMesero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bVerificar.png"))); // NOI18N
        bVerificarIDMesero.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bVerificarPR.png"))); // NOI18N
        bVerificarIDMesero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerificarIDMeseroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInferiorLayout = new javax.swing.GroupLayout(panelInferior);
        panelInferior.setLayout(panelInferiorLayout);
        panelInferiorLayout.setHorizontalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInferiorLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(bAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelInferiorLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lMesa)
                    .addComponent(lTipoPedido)
                    .addComponent(lSucursal)
                    .addComponent(lSucursal1)
                    .addComponent(lbTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInferiorLayout.createSequentialGroup()
                        .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbSucursales, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbMesa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(98, 98, 98)
                        .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lIDMesero, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lIDCliente, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(40, 40, 40)
                        .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfIDMesero, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(tfIDCliente)))
                    .addGroup(panelInferiorLayout.createSequentialGroup()
                        .addComponent(bLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(bFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(bVerificarIDMesero, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                        .addComponent(bVerificarIDCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bAgregarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bQuitarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(bMarcarEntregado, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(40, 40, 40))
        );
        panelInferiorLayout.setVerticalGroup(
            panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInferiorLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lTipoPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lIDCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfIDCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(bVerificarIDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lMesa)
                    .addComponent(cbMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lIDMesero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfIDMesero, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(bVerificarIDMesero, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSucursales, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelInferiorLayout.createSequentialGroup()
                        .addComponent(bAgregarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(bQuitarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(bMarcarEntregado, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lSucursal1)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbValorTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInferiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(bLimpiar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(bAtras, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bFinalizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        lLogo.setBackground(new java.awt.Color(89, 30, 27));
        lLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logoPequeno.png"))); // NOI18N
        lLogo.setMaximumSize(new java.awt.Dimension(140, 140));
        lLogo.setMinimumSize(new java.awt.Dimension(140, 140));
        lLogo.setPreferredSize(new java.awt.Dimension(140, 140));

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(panelInferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(447, 447, 447))
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelInferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAtrasActionPerformed

        int opcion = JOptionPane.showConfirmDialog(null, "¿Desea cancelar la operación?");

        if (opcion == JOptionPane.YES_OPTION) {
            this.dispose();

            VentanaGestionPedidos vGestPedidos = (VentanaGestionPedidos) ventanaAnterior;
            vGestPedidos.llenarTablaPedidos();
            vGestPedidos.setVisible(true);
        }


    }//GEN-LAST:event_bAtrasActionPerformed

    private void bFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFinalizarActionPerformed
        //Se verifica si se va a crear un pedido o a modificar uno

        if (operacion.equals("Registro")) {

            int indexTipo = cbTipo.getSelectedIndex();
            int indexMesa = cbMesa.getSelectedIndex();
            int indexSucursal = cbSucursales.getSelectedIndex();

            //En caso de ser un pedido para llevar no necesita mesero
            //Se verifica que esté lleno lo necesario
            if (indexSucursal == 0 || total == 0.0 || indexTipo == 0 || !clienteVerificado) {
                JOptionPane.showMessageDialog(null, "Debe completar todos los datos para el pedido", "Advertencia", JOptionPane.WARNING_MESSAGE);

            } else {
                //Se registra un pedido para llevar
                //Se obtiene el tipo de pedido
                String tipoPedido = cbTipo.getSelectedItem().toString();
                System.out.println("tipoPedido: " + tipoPedido);

                //Se obtiene la mesa (Puede ser null en caso de ser pedido para llevar)
                Mesa mesa;
                if (indexMesa == 0) {
                    //Es porque el pedido es para llevar
                    mesa = null;
                } else {
                    mesa = adaptadorMesa.obtenerMesa(Long.parseLong(cbMesa.getSelectedItem().toString()));
                }

                //Se obtiene el mesero ((Puede ser null en caso de ser pedido para llevar)
                Empleado mesero = adaptadorEmpleado.obtenerEmpleado(tfIDMesero.getText());

                //Se obtiene la hora actual
                LocalDateTime horaInicio = LocalDateTime.now();
                System.out.println(horaInicio);

                String idCliente = tfIDCliente.getText();
                String nombreSucursal = cbSucursales.getSelectedItem().toString();

                //Se obtiene el objeto Cliente y Sucursal
                Cliente clienteComprador = adaptadorCliente.obtenerCliente(idCliente);
                Sucursal sucursalPedido = getSucursal(nombreSucursal);

                boolean entregado = false;

                //Se guarda el pedido en la Bd, en las tablas necesarias con su respectiva información
                Pedido pedidoGuardado = fabricaDePedidos.crearPedido(tipoPedido, horaInicio, null, mesa, mesero, clienteComprador, sucursalPedido, total, entregado);

                guardarItemsPedido(pedidoGuardado, "Registro");

                JOptionPane.showMessageDialog(null, "El pedido fue registrado con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                limpiarCampos();

            }
        } else if (operacion.equals("Modificación")) {

            Long numPedido = pedido.getNumero();
            total = calcularTotal();
            lbValorTotal.setText("$ " + total);
            pedido.setTotal(total);

            //Se comprueba que todos los items de ese pedido estén en entregado=true
            ArrayList<Boolean> itemsEntregados = adaptadorItemPedido.obtenerEntregadoItemsPedido(numPedido);
            boolean todosItemsEntregados = true;
            for (int i = 0; i < itemsEntregados.size(); i++) {
                if (!itemsEntregados.get(i)) {
                    //En caso de que haya un false, algún item NO se entregó
                    todosItemsEntregados = false;
                }
            }

            if (todosItemsEntregados) {
                //Se actualiza la bd -> tabla: pedido
                pedido.setEntregado(true);

                //Se pone la hora de la entrega
                LocalDateTime horaEntrega = LocalDateTime.now();
                pedido.setHoraEntrega(horaEntrega);

                JOptionPane.showMessageDialog(null, "El pedido fue entregado completamente con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                

            } else {
                //Se limpia primero. Se eliminan los items asociado a este pedido en Pedido_Item
                
                adaptadorItemPedido.eliminarPedidoItems(numPedido);
                
                //Se guarda el registro de los items en el pedido
                guardarItemsPedido(pedido, "Modificación");
                
                
                JOptionPane.showMessageDialog(null, "El pedido fue modificado con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            }

            
            adaptadorPedido.editarPedido(pedido);
            VentanaGestionPedidos vPedidos = (VentanaGestionPedidos) ventanaAnterior;
            this.dispose();
            vPedidos.setVisible(true);
            vPedidos.llenarTablaPedidos();

        }


    }//GEN-LAST:event_bFinalizarActionPerformed

    private void bAgregarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarItemActionPerformed

        VentanaAgregarItem vAddItem = new VentanaAgregarItem(this);
        vAddItem.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_bAgregarItemActionPerformed

    private void bQuitarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bQuitarItemActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tablaItemsPedido.getSelectedRow();
        if (filaSeleccionada != -1) {

            DefaultTableModel modelo = (DefaultTableModel) tablaItemsPedido.getModel();
            Long codItem = Long.parseLong(tablaItemsPedido.getValueAt(filaSeleccionada, 0).toString());

            //Se pone el total en el JLabel
            //Se debe eliminar el item de la tabla pedido_item
            /*Pedido_Item pedido_item_eliminar
             = adaptadorItemPedido.obtenerPedidoItem(new PedidoItemPK(pedido.getNumero(), codItem));
             adaptadorItemPedido.eliminarPedidoItem(pedido_item_eliminar);*/
            modelo.removeRow(filaSeleccionada);
            total = calcularTotal();
            lbValorTotal.setText("$ " + total);
            tablaItemsPedido.setModel(modelo);
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar la fila del item a eliminar", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_bQuitarItemActionPerformed

    private void bMarcarEntregadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMarcarEntregadoActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tablaItemsPedido.getSelectedRow();
        if (filaSeleccionada != -1) {

            DefaultTableModel modelo = (DefaultTableModel) tablaItemsPedido.getModel();

            Long codItem = Long.parseLong(tablaItemsPedido.getValueAt(filaSeleccionada, 0).toString());
            Long numPedido = pedido.getNumero();
            boolean entregado = true;
            //Se actualiza en la BD
            adaptadorItemPedido.actualizarEntregadoItemPedido(numPedido, codItem, entregado);

            //Se actualiza en la tabla
            tablaItemsPedido.setValueAt("Sí", filaSeleccionada, 5);

            tablaItemsPedido.setModel(modelo);
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar la fila del item que se entregó", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_bMarcarEntregadoActionPerformed

    private void tablaItemsPedidoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaItemsPedidoKeyReleased

        int columnaSeleccionada = tablaItemsPedido.getSelectedColumn();
        int filaSeleccionada = tablaItemsPedido.getSelectedRow();

        if (columnaSeleccionada == 3) {
            //Actualizar subtotales
            double precioItem = (double) tablaItemsPedido.getValueAt(filaSeleccionada, 2);
            double cantidad = Double.parseDouble((String) tablaItemsPedido.getValueAt(filaSeleccionada, 3));

            double subtotal = precioItem * cantidad;
            tablaItemsPedido.setValueAt(subtotal, filaSeleccionada, 4);

            //Se pone el total en el JLabel
            total = calcularTotal();
            lbValorTotal.setText("$ " + total);

        }

    }//GEN-LAST:event_tablaItemsPedidoKeyReleased

    private void bVerificarIDClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerificarIDClienteActionPerformed

        //Validar la existencia del id en tabla de clientes
        String idCliente = tfIDCliente.getText();
        if (idCliente.equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese la identificación del cliente", "Información", JOptionPane.INFORMATION_MESSAGE);

        } else {
            Cliente existeCliente = adaptadorCliente.obtenerCliente(idCliente);

            if (existeCliente != null) {
                //tfIDCliente.setText(existeCliente.getNombre() + " " + existeCliente.getApellidos());
                JOptionPane.showMessageDialog(null, "Listo");
                tfIDCliente.setEditable(false);
                bVerificarIDCliente.setEnabled(false);
                clienteVerificado = true;

            } else {
                //Si no existe en la BD, se debe registrar
                JOptionPane.showMessageDialog(null, "Se debe registrar la información del cliente", "Información", JOptionPane.INFORMATION_MESSAGE);
                VentanaRegistrarCliente vRegCliente = new VentanaRegistrarCliente(this, idCliente);
                vRegCliente.setVisible(true);
                this.setVisible(false);
            }
        }


    }//GEN-LAST:event_bVerificarIDClienteActionPerformed

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed
        // TODO add your handling code here:
        limpiarCampos();
    }//GEN-LAST:event_bLimpiarActionPerformed

    private void bVerificarIDMeseroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerificarIDMeseroActionPerformed
        // TODO add your handling code here:
        //Validar la existencia del id en tabla de Empleado con cargo Mesero
        idMesero = tfIDMesero.getText();
        if (idMesero.equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese la identificación del mesero", "Información", JOptionPane.INFORMATION_MESSAGE);

        } else {
            Empleado existeMesero = adaptadorEmpleado.obtenerEmpleado(idMesero);

            if (existeMesero != null) {
                //tfIDMesero.setText(existeMesero.getNombre() + " " + existeMesero.getApellidos());
                JOptionPane.showMessageDialog(null, "Listo");
                tfIDMesero.setEditable(false);
                bVerificarIDMesero.setEnabled(false);
                meseroVerificado = true;

            } else {
                //Si no existe en la BD, se debe registrar
                JOptionPane.showMessageDialog(null, "El empleado con identificación " + idMesero + " no se encuentra registrado. Comuníquese con el gerente para hacer el debido registro.",
                        "Información", JOptionPane.INFORMATION_MESSAGE);

            }
        }
    }//GEN-LAST:event_bVerificarIDMeseroActionPerformed

    private void cbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoActionPerformed
        // TODO add your handling code here:
        //En caso de que sea pedido para la mesa, se habilitan todos los campos
        if (cbTipo.getSelectedIndex() == 1) {
            tfIDMesero.setEnabled(true);
            cbMesa.setEnabled(true);
            bVerificarIDMesero.setEnabled(true);
        } else if (cbTipo.getSelectedIndex() == 2) {
            //Si el pedido es para llevar, no se necesita ni mesero ni mesa
            tfIDMesero.setEnabled(false);
            tfIDMesero.setText("");
            cbMesa.setEnabled(false);
            cbMesa.setSelectedIndex(0);
            bVerificarIDMesero.setEnabled(false);

            pedidoParaLlevar = true;
        }

    }//GEN-LAST:event_cbTipoActionPerformed

    //Llena el JComboBox con las mesas registradas en la BD
    public void llenarCbMesas() {
        cbMesa.removeAllItems();
        cbMesa.addItem("Seleccione una mesa");
        List<Mesa> listaMesas = adaptadorMesa.obtenerTodasMesas();
        for (int i = 0; i < listaMesas.size(); i++) {
            cbMesa.addItem("" + listaMesas.get(i).getNumero());
        }

    }

    //Llena el JComboBox con las sucursales registradas en la BD
    public void llenarCbSucursales() {
        cbSucursales.removeAllItems();
        cbSucursales.addItem("Seleccione una sucursal");
        List<Sucursal> listaSucursales = adaptadorSucursal.obtenerTodasLasSucursales();
        for (int i = 0; i < listaSucursales.size(); i++) {
            cbSucursales.addItem(listaSucursales.get(i).getNombre());
        }
    }

    //Se agrega un Item al pedido. El Item llega desde VentanaAgregarItem
    public boolean agregarItem(Item itemAgregado) {
        boolean yaSeHabiaAgregadoItem = true; //Bandera que nos indica si el item a agregar ya estaba en la tabla (ya había sido agregado)

        //Verificamos que el Item a agregar no haya sido agregado already
        Long codigoItem = itemAgregado.getCodigo();

        for (int i = 0; i < tablaItemsPedido.getRowCount(); i++) {
            Long codigo = (Long) tablaItemsPedido.getValueAt(i, 0);

            if (codigo == codigoItem) {
                return false;
            }
        }

        Item itemParaAgregar = adaptadorITem.obtenerItem(itemAgregado.getCodigo());
        DefaultTableModel modelo = (DefaultTableModel) tablaItemsPedido.getModel();

        //Se agrega normal
        Object[] fila = new Object[7];
        fila[0] = itemAgregado.getCodigo();
        fila[1] = itemAgregado.getNombre();
        fila[2] = itemAgregado.getPrecioActual();
        fila[3] = 0;
        fila[4] = calcularTotal();
        fila[5] = "No";

        modelo.addRow(fila);

        tablaItemsPedido.setModel(modelo);

        return yaSeHabiaAgregadoItem;
    }

    //Se encarga de sumar todos los subtotales para obtener el total del pedido
    public double calcularTotal() {
        double total = 0.0;

        for (int i = 0; i < tablaItemsPedido.getRowCount(); i++) {
            total += (double) tablaItemsPedido.getValueAt(i, 4);
        }
        return total;
    }

    //Se encarga de obtener el objeto Sucursal, dado el nombre de la misma
    public Sucursal getSucursal(String nombreSucursal) {
        Long codSucursal = null;

        //Se busca entre todas las sucursales, la que se eligió (por el nombre)
        ArrayList<Sucursal> sucursales = adaptadorSucursal.obtenerTodasLasSucursales();
        for (int i = 0; i < sucursales.size(); i++) {
            if (sucursales.get(i).getNombre().equals(nombreSucursal)) {
                codSucursal = sucursales.get(i).getCodigo();
            }
        }

        Sucursal sucursalActual = adaptadorSucursal.obtenerSucursal(codSucursal);

        return sucursalActual;
    }

    //Se limpian los campos para un nuevo pedido
    public void limpiarCampos() {
        tfIDCliente.setText("");
        tfIDCliente.setEnabled(true);
        tfIDCliente.setEditable(true);
        tfIDMesero.setText("");
        tfIDMesero.setEnabled(true);
        tfIDMesero.setEditable(true);
        cbMesa.setSelectedIndex(0);
        cbMesa.setEnabled(true);
        cbSucursales.setSelectedIndex(0);
        cbTipo.setSelectedIndex(0);
        bVerificarIDCliente.setEnabled(true);
        bVerificarIDMesero.setEnabled(true);
        lbValorTotal.setText("$ ");

        //Se limpia la tabla
        DefaultTableModel modelo = (DefaultTableModel) tablaItemsPedido.getModel();
        modelo.setRowCount(0);

        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i -= 1;
        }

        tablaItemsPedido.setModel(modelo);
    }

    //Se encarga de colocar los datos del pedido a modificar en la ventana
    public void llenarDatos(Pedido pedidoAModificar) {

        Long numPedido = pedidoAModificar.getNumero();

        //Se pone el tipo de pedido
        String tipoPedido = pedidoAModificar.getTipoPedido();
        cbTipo.setSelectedItem(tipoPedido);
        cbTipo.setEnabled(false);

        bVerificarIDCliente.setVisible(false);
        tfIDCliente.setText(pedidoAModificar.getCliente().getId());
        tfIDCliente.setEditable(false);

        cbSucursales.setSelectedItem(pedidoAModificar.getSucursalPedido().getNombre());
        System.out.println(cbSucursales.getItemAt(6));
        System.out.println(pedidoAModificar.getSucursalPedido().getNombre());
        cbSucursales.setEnabled(false);

        //En caso de que haya sido pedido para llevar
        if (tipoPedido.equals("Para llevar")) {
            cbMesa.setSelectedIndex(0);
            tfIDMesero.setText("");
        } else {
            cbMesa.setSelectedItem(pedidoAModificar.getMesa().getNumero().toString());
            tfIDMesero.setText(pedidoAModificar.getMesero().getId());
        }

        cbMesa.setEnabled(false);
        tfIDMesero.setEditable(false);
        bVerificarIDMesero.setVisible(false);

        //Se ponen los items
        ArrayList<BigInteger> codigos_items = adaptadorItemPedido.obtenerCodigo_ItemsPedido(numPedido);
        ArrayList<Integer> cantidadItems = adaptadorItemPedido.obtenerCantidadItemsPedido(numPedido);
        ArrayList<Boolean> entregadoItems = adaptadorItemPedido.obtenerEntregadoItemsPedido(numPedido);

        for (int i = 0; i < codigos_items.size(); i++) {
            Long cod_item = codigos_items.get(i).longValue();
            Item item = adaptadorITem.obtenerItem(cod_item);
            String nombre = item.getNombre();
            double precioUnitario = item.getPrecioActual();
            int cantidad = cantidadItems.get(i);
            double subtotal = precioUnitario * cantidad;
            boolean entregado = entregadoItems.get(i);
            String infoEntregado = "";
            if (entregado) {
                infoEntregado = "Sí";
            } else {
                infoEntregado = "No";
            }

            //Se agrega a la tabla
            DefaultTableModel modelo = (DefaultTableModel) tablaItemsPedido.getModel();
            Object[] fila = new Object[7];
            fila[0] = cod_item;
            fila[1] = nombre;
            fila[2] = precioUnitario;
            fila[3] = cantidad;
            fila[4] = subtotal;
            fila[5] = infoEntregado;

            modelo.addRow(fila);
            tablaItemsPedido.setModel(modelo);

            //Se agregó el item i
        }

    }

    //Se encarga de guardar los items de cada pedido. Tabla: item_pedido
    public void guardarItemsPedido(Pedido pedidoGuardado, String operacion) {
        
        DefaultTableModel modelo = (DefaultTableModel) tablaItemsPedido.getModel();
        int cantFilas = modelo.getRowCount();
        
        for (int i = 0; i < cantFilas; i++) {

            Long codItem = (Long) tablaItemsPedido.getValueAt(i, 0);
            
            int cantidad = Integer.parseInt(tablaItemsPedido.getValueAt(i, 3).toString());
            boolean entregado = false;
            String estado = tablaItemsPedido.getValueAt(i, 5).toString();
            if(estado.equalsIgnoreCase("Sí")) { entregado = true; }

            Pedido_Item pedidoItem = new Pedido_Item(pedidoGuardado.getNumero(), codItem, cantidad, entregado);

            //guardamos el item i en la tabla item_pedido
            adaptadorItemPedido.crearPedidoItem(pedidoItem);

        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaRegistrarModificarPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaRegistrarModificarPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaRegistrarModificarPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaRegistrarModificarPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaRegistrarModificarPedido(null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAgregarItem;
    private javax.swing.JButton bAtras;
    private javax.swing.JButton bFinalizar;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton bMarcarEntregado;
    private javax.swing.JButton bQuitarItem;
    public javax.swing.JButton bVerificarIDCliente;
    private javax.swing.JButton bVerificarIDMesero;
    private javax.swing.JComboBox<String> cbMesa;
    private javax.swing.JComboBox<String> cbSucursales;
    private javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lIDCliente;
    private javax.swing.JLabel lIDMesero;
    private javax.swing.JLabel lLogo;
    private javax.swing.JLabel lMesa;
    private javax.swing.JLabel lSucursal;
    private javax.swing.JLabel lSucursal1;
    private javax.swing.JLabel lTipoPedido;
    private javax.swing.JLabel lbTotal;
    public javax.swing.JLabel lbValorTotal;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JTable tablaItemsPedido;
    private javax.swing.JTextField tfIDCliente;
    private javax.swing.JTextField tfIDMesero;
    // End of variables declaration//GEN-END:variables
}
